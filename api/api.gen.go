// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for QuestionType.
const (
	MultipleChoice QuestionType = "multiple_choice"
	Rating         QuestionType = "rating"
	Text           QuestionType = "text"
)

// Campaign defines model for Campaign.
type Campaign struct {
	Amount         float32            `json:"amount"`
	CampaignName   string             `json:"campaignName"`
	CharacterType  string             `json:"characterType"`
	CouponId       string             `json:"couponId"`
	CouponLength   int                `json:"couponLength"`
	CouponNumber   int                `json:"couponNumber"`
	Id             openapi_types.UUID `json:"id"`
	OrganizationId openapi_types.UUID `json:"organizationId"`
	QuestionNumber int                `json:"questionNumber"`
	Status         string             `json:"status"`
	WelcomeMessage string             `json:"welcomeMessage"`
}

// Coupon defines model for Coupon.
type Coupon struct {
	CampaignId openapi_types.UUID `json:"campaignId"`
	Code       string             `json:"code"`
	Id         openapi_types.UUID `json:"id"`
	Redeemed   bool               `json:"redeemed"`
	RedeemedAt *time.Time         `json:"redeemedAt"`
}

// CreateUserRequestBody defines model for CreateUserRequestBody.
type CreateUserRequestBody struct {
	Address         string              `json:"address"`
	ConfirmPassword string              `json:"confirmPassword"`
	Email           openapi_types.Email `json:"email"`
	FirstName       string              `json:"firstName"`
	LastName        string              `json:"lastName"`
	OrganizationId  openapi_types.UUID  `json:"organization_id"`
	Password        string              `json:"password"`
	PhoneNumber     string              `json:"phoneNumber"`
	Role            string              `json:"role"`
}

// Customer defines model for Customer.
type Customer struct {
	Amount         float32             `json:"amount"`
	CampaignId     openapi_types.UUID  `json:"campaignId"`
	Email          openapi_types.Email `json:"email"`
	Feedback       string              `json:"feedback"`
	FirstName      string              `json:"firstName"`
	Id             openapi_types.UUID  `json:"id"`
	LastName       string              `json:"lastName"`
	Network        string              `json:"network"`
	OrganizationId openapi_types.UUID  `json:"organizationId"`
	Phone          string              `json:"phone"`
	Status         string              `json:"status"`
}

// Error defines model for Error.
type Error struct {
	ErrorCode string `json:"error_code"`
	Message   string `json:"message"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// Organization defines model for Organization.
type Organization struct {
	Address            string              `json:"address"`
	CompanyName        string              `json:"company_name"`
	CompanySize        int                 `json:"company_size"`
	ContactPersonName  string              `json:"contact_person_name"`
	ContactPersonPhone string              `json:"contact_person_phone"`
	Email              openapi_types.Email `json:"email"`
	Id                 openapi_types.UUID  `json:"id"`
	Industry           string              `json:"industry"`
}

// Question defines model for Question.
type Question struct {
	CampaignId openapi_types.UUID `json:"campaignId"`
	Id         openapi_types.UUID `json:"id"`
	Options    *[]string          `json:"options"`
	Text       string             `json:"text"`
	Type       QuestionType       `json:"type"`
}

// QuestionType defines model for Question.Type.
type QuestionType string

// Response defines model for Response.
type Response struct {
	Answer     string             `json:"answer"`
	CustomerId openapi_types.UUID `json:"customerId"`
	Id         openapi_types.UUID `json:"id"`
	QuestionId openapi_types.UUID `json:"questionId"`
}

// User defines model for User.
type User struct {
	Address        string              `json:"address"`
	Email          openapi_types.Email `json:"email"`
	Firstname      string              `json:"firstname"`
	Id             openapi_types.UUID  `json:"id"`
	Lastname       string              `json:"lastname"`
	OrganizationId openapi_types.UUID  `json:"organization_id"`
	Password       string              `json:"password"`
	Role           string              `json:"role"`
}

// BadRequestError defines model for BadRequestError.
type BadRequestError = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// GetAllCampaignsParams defines parameters for GetAllCampaigns.
type GetAllCampaignsParams struct {
	// Limit Number of campaigns to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of campaigns to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetCampaignsByOrganizationParams defines parameters for GetCampaignsByOrganization.
type GetCampaignsByOrganizationParams struct {
	// Limit Number of campaigns to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of campaigns to skip before starting to return results
	Offset         *int               `form:"offset,omitempty" json:"offset,omitempty"`
	OrganizationId openapi_types.UUID `form:"organizationId" json:"organizationId"`
}

// GetCampaignsCampaignIdQuestionsParams defines parameters for GetCampaignsCampaignIdQuestions.
type GetCampaignsCampaignIdQuestionsParams struct {
	// Limit Number of questions to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of questions to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostCampaignsCampaignIdQuestionsJSONBody defines parameters for PostCampaignsCampaignIdQuestions.
type PostCampaignsCampaignIdQuestionsJSONBody = []Question

// GetAllCustomersParams defines parameters for GetAllCustomers.
type GetAllCustomersParams struct {
	// Limit Number of campaigns to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of campaigns to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetCustomersByOrganizationParams defines parameters for GetCustomersByOrganization.
type GetCustomersByOrganizationParams struct {
	OrganizationId openapi_types.UUID `form:"organizationId" json:"organizationId"`

	// Limit Number of customers to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of customers to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetOrganizationsParams defines parameters for GetOrganizations.
type GetOrganizationsParams struct {
	// Limit Number of organizations to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of organizations to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetOrganizationByNameParams defines parameters for GetOrganizationByName.
type GetOrganizationByNameParams struct {
	Name string `form:"name" json:"name"`

	// Limit Number of organizations to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of organizations to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetUsersByOrganizationParams defines parameters for GetUsersByOrganization.
type GetUsersByOrganizationParams struct {
	// Limit Number of users to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of users to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetQuestionsQuestionIdResponsesParams defines parameters for GetQuestionsQuestionIdResponses.
type GetQuestionsQuestionIdResponsesParams struct {
	// Limit Number of responses to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of responses to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Limit Number of users to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of users to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetUserByEmailParams defines parameters for GetUserByEmail.
type GetUserByEmailParams struct {
	Email openapi_types.Email `form:"email" json:"email"`
}

// UpdateUserPasswordJSONBody defines parameters for UpdateUserPassword.
type UpdateUserPasswordJSONBody struct {
	// NewPassword The new password to set.
	NewPassword string `json:"new_password"`

	// OldPassword The current password of the user.
	OldPassword string `json:"old_password"`
}

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginRequest

// CreateCampaignJSONRequestBody defines body for CreateCampaign for application/json ContentType.
type CreateCampaignJSONRequestBody = Campaign

// PostCampaignsCampaignIdQuestionsJSONRequestBody defines body for PostCampaignsCampaignIdQuestions for application/json ContentType.
type PostCampaignsCampaignIdQuestionsJSONRequestBody = PostCampaignsCampaignIdQuestionsJSONBody

// UpdateCampaignJSONRequestBody defines body for UpdateCampaign for application/json ContentType.
type UpdateCampaignJSONRequestBody = Campaign

// CreateCustomerJSONRequestBody defines body for CreateCustomer for application/json ContentType.
type CreateCustomerJSONRequestBody = Customer

// UpdateCustomerJSONRequestBody defines body for UpdateCustomer for application/json ContentType.
type UpdateCustomerJSONRequestBody = Customer

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody = Organization

// UpdateOrganizationJSONRequestBody defines body for UpdateOrganization for application/json ContentType.
type UpdateOrganizationJSONRequestBody = Organization

// PostQuestionsQuestionIdResponsesJSONRequestBody defines body for PostQuestionsQuestionIdResponses for application/json ContentType.
type PostQuestionsQuestionIdResponsesJSONRequestBody = Response

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserRequestBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = User

// UpdateUserPasswordJSONRequestBody defines body for UpdateUserPassword for application/json ContentType.
type UpdateUserPasswordJSONRequestBody UpdateUserPasswordJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User login
	// (POST /auth/login)
	LoginUser(c *fiber.Ctx) error
	// Get all campaigns
	// (GET /campaigns)
	GetAllCampaigns(c *fiber.Ctx, params GetAllCampaignsParams) error
	// Create a new campaign
	// (POST /campaigns)
	CreateCampaign(c *fiber.Ctx) error
	// Get all campaigns for a specific organization
	// (GET /campaigns/organization)
	GetCampaignsByOrganization(c *fiber.Ctx, params GetCampaignsByOrganizationParams) error
	// Get all questions for a campaign
	// (GET /campaigns/{campaignId}/questions)
	GetCampaignsCampaignIdQuestions(c *fiber.Ctx, campaignId openapi_types.UUID, params GetCampaignsCampaignIdQuestionsParams) error
	// Create a new question for a campaign
	// (POST /campaigns/{campaignId}/questions)
	PostCampaignsCampaignIdQuestions(c *fiber.Ctx, campaignId openapi_types.UUID) error
	// Delete a campaign by ID
	// (DELETE /campaigns/{id})
	DeleteCampaign(c *fiber.Ctx, id openapi_types.UUID) error
	// Get a campaign by ID
	// (GET /campaigns/{id})
	GetCampaignById(c *fiber.Ctx, id openapi_types.UUID) error
	// Update a campaign by ID
	// (PUT /campaigns/{id})
	UpdateCampaign(c *fiber.Ctx, id openapi_types.UUID) error
	// Get all coupons for a specific campaign
	// (GET /campaigns/{id}/coupons)
	GetCouponsByCampaign(c *fiber.Ctx, id openapi_types.UUID) error
	// Generate tokens for a campaign
	// (POST /campaigns/{id}/generate-tokens)
	GenerateTokens(c *fiber.Ctx, id openapi_types.UUID) error
	// Get all customers
	// (GET /customers)
	GetAllCustomers(c *fiber.Ctx, params GetAllCustomersParams) error
	// Create a new customer
	// (POST /customers)
	CreateCustomer(c *fiber.Ctx) error
	// Get all customers for a specific organization
	// (GET /customers/organization)
	GetCustomersByOrganization(c *fiber.Ctx, params GetCustomersByOrganizationParams) error
	// Delete a customer by ID
	// (DELETE /customers/{id})
	DeleteCustomer(c *fiber.Ctx, id openapi_types.UUID) error
	// Get a customer by ID
	// (GET /customers/{id})
	GetCustomerById(c *fiber.Ctx, id openapi_types.UUID) error
	// Update a customer by ID
	// (PUT /customers/{id})
	UpdateCustomer(c *fiber.Ctx, id openapi_types.UUID) error
	// Get all organizations
	// (GET /organizations)
	GetOrganizations(c *fiber.Ctx, params GetOrganizationsParams) error
	// Create an organization
	// (POST /organizations)
	CreateOrganization(c *fiber.Ctx) error
	// Get an organization by name
	// (GET /organizations/search)
	GetOrganizationByName(c *fiber.Ctx, params GetOrganizationByNameParams) error
	// Delete an organization
	// (DELETE /organizations/{organization_id})
	DeleteOrganization(c *fiber.Ctx, organizationId openapi_types.UUID) error
	// Get an organization by ID
	// (GET /organizations/{organization_id})
	GetOrganizationById(c *fiber.Ctx, organizationId openapi_types.UUID) error
	// Update an organization
	// (PUT /organizations/{organization_id})
	UpdateOrganization(c *fiber.Ctx, organizationId openapi_types.UUID) error
	// Get all users in an organization
	// (GET /organizations/{organization_id}/users)
	GetUsersByOrganization(c *fiber.Ctx, organizationId openapi_types.UUID, params GetUsersByOrganizationParams) error
	// Delete a question
	// (DELETE /questions/{questionId})
	DeleteQuestionsQuestionId(c *fiber.Ctx, questionId openapi_types.UUID) error
	// Get all responses for a question
	// (GET /questions/{questionId}/responses)
	GetQuestionsQuestionIdResponses(c *fiber.Ctx, questionId openapi_types.UUID, params GetQuestionsQuestionIdResponsesParams) error
	// Create a response for a question
	// (POST /questions/{questionId}/responses)
	PostQuestionsQuestionIdResponses(c *fiber.Ctx, questionId openapi_types.UUID) error
	// Get all users
	// (GET /users)
	GetUsers(c *fiber.Ctx, params GetUsersParams) error
	// Create a user
	// (POST /users)
	CreateUser(c *fiber.Ctx) error
	// Get a user by email
	// (GET /users/email)
	GetUserByEmail(c *fiber.Ctx, params GetUserByEmailParams) error
	// Delete a user
	// (DELETE /users/{user_id})
	DeleteUser(c *fiber.Ctx, userId openapi_types.UUID) error
	// Get a user by ID
	// (GET /users/{user_id})
	GetUserById(c *fiber.Ctx, userId openapi_types.UUID) error
	// Update a user
	// (PUT /users/{user_id})
	UpdateUser(c *fiber.Ctx, userId openapi_types.UUID) error
	// Update user password
	// (PUT /users/{user_id}/password)
	UpdateUserPassword(c *fiber.Ctx, userId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.LoginUser(c)
}

// GetAllCampaigns operation middleware
func (siw *ServerInterfaceWrapper) GetAllCampaigns(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllCampaignsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetAllCampaigns(c, params)
}

// CreateCampaign operation middleware
func (siw *ServerInterfaceWrapper) CreateCampaign(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateCampaign(c)
}

// GetCampaignsByOrganization operation middleware
func (siw *ServerInterfaceWrapper) GetCampaignsByOrganization(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignsByOrganizationParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Required query parameter "organizationId" -------------

	if paramValue := c.Query("organizationId"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument organizationId is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "organizationId", query, &params.OrganizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organizationId: %w", err).Error())
	}

	return siw.Handler.GetCampaignsByOrganization(c, params)
}

// GetCampaignsCampaignIdQuestions operation middleware
func (siw *ServerInterfaceWrapper) GetCampaignsCampaignIdQuestions(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "campaignId" -------------
	var campaignId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "campaignId", c.Params("campaignId"), &campaignId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter campaignId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignsCampaignIdQuestionsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetCampaignsCampaignIdQuestions(c, campaignId, params)
}

// PostCampaignsCampaignIdQuestions operation middleware
func (siw *ServerInterfaceWrapper) PostCampaignsCampaignIdQuestions(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "campaignId" -------------
	var campaignId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "campaignId", c.Params("campaignId"), &campaignId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter campaignId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostCampaignsCampaignIdQuestions(c, campaignId)
}

// DeleteCampaign operation middleware
func (siw *ServerInterfaceWrapper) DeleteCampaign(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteCampaign(c, id)
}

// GetCampaignById operation middleware
func (siw *ServerInterfaceWrapper) GetCampaignById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetCampaignById(c, id)
}

// UpdateCampaign operation middleware
func (siw *ServerInterfaceWrapper) UpdateCampaign(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateCampaign(c, id)
}

// GetCouponsByCampaign operation middleware
func (siw *ServerInterfaceWrapper) GetCouponsByCampaign(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetCouponsByCampaign(c, id)
}

// GenerateTokens operation middleware
func (siw *ServerInterfaceWrapper) GenerateTokens(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GenerateTokens(c, id)
}

// GetAllCustomers operation middleware
func (siw *ServerInterfaceWrapper) GetAllCustomers(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllCustomersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetAllCustomers(c, params)
}

// CreateCustomer operation middleware
func (siw *ServerInterfaceWrapper) CreateCustomer(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateCustomer(c)
}

// GetCustomersByOrganization operation middleware
func (siw *ServerInterfaceWrapper) GetCustomersByOrganization(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomersByOrganizationParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "organizationId" -------------

	if paramValue := c.Query("organizationId"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument organizationId is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "organizationId", query, &params.OrganizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organizationId: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetCustomersByOrganization(c, params)
}

// DeleteCustomer operation middleware
func (siw *ServerInterfaceWrapper) DeleteCustomer(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteCustomer(c, id)
}

// GetCustomerById operation middleware
func (siw *ServerInterfaceWrapper) GetCustomerById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetCustomerById(c, id)
}

// UpdateCustomer operation middleware
func (siw *ServerInterfaceWrapper) UpdateCustomer(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateCustomer(c, id)
}

// GetOrganizations operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizations(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrganizationsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetOrganizations(c, params)
}

// CreateOrganization operation middleware
func (siw *ServerInterfaceWrapper) CreateOrganization(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateOrganization(c)
}

// GetOrganizationByName operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizationByName(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrganizationByNameParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "name" -------------

	if paramValue := c.Query("name"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument name is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetOrganizationByName(c, params)
}

// DeleteOrganization operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrganization(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "organization_id" -------------
	var organizationId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "organization_id", c.Params("organization_id"), &organizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organization_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteOrganization(c, organizationId)
}

// GetOrganizationById operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizationById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "organization_id" -------------
	var organizationId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "organization_id", c.Params("organization_id"), &organizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organization_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetOrganizationById(c, organizationId)
}

// UpdateOrganization operation middleware
func (siw *ServerInterfaceWrapper) UpdateOrganization(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "organization_id" -------------
	var organizationId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "organization_id", c.Params("organization_id"), &organizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organization_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateOrganization(c, organizationId)
}

// GetUsersByOrganization operation middleware
func (siw *ServerInterfaceWrapper) GetUsersByOrganization(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "organization_id" -------------
	var organizationId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "organization_id", c.Params("organization_id"), &organizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organization_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersByOrganizationParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetUsersByOrganization(c, organizationId, params)
}

// DeleteQuestionsQuestionId operation middleware
func (siw *ServerInterfaceWrapper) DeleteQuestionsQuestionId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "questionId" -------------
	var questionId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "questionId", c.Params("questionId"), &questionId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter questionId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteQuestionsQuestionId(c, questionId)
}

// GetQuestionsQuestionIdResponses operation middleware
func (siw *ServerInterfaceWrapper) GetQuestionsQuestionIdResponses(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "questionId" -------------
	var questionId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "questionId", c.Params("questionId"), &questionId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter questionId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQuestionsQuestionIdResponsesParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetQuestionsQuestionIdResponses(c, questionId, params)
}

// PostQuestionsQuestionIdResponses operation middleware
func (siw *ServerInterfaceWrapper) PostQuestionsQuestionIdResponses(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "questionId" -------------
	var questionId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "questionId", c.Params("questionId"), &questionId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter questionId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostQuestionsQuestionIdResponses(c, questionId)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetUsers(c, params)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateUser(c)
}

// GetUserByEmail operation middleware
func (siw *ServerInterfaceWrapper) GetUserByEmail(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserByEmailParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "email" -------------

	if paramValue := c.Query("email"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument email is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "email", query, &params.Email)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter email: %w", err).Error())
	}

	return siw.Handler.GetUserByEmail(c, params)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteUser(c, userId)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetUserById(c, userId)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateUser(c, userId)
}

// UpdateUserPassword operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserPassword(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateUserPassword(c, userId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/auth/login", wrapper.LoginUser)

	router.Get(options.BaseURL+"/campaigns", wrapper.GetAllCampaigns)

	router.Post(options.BaseURL+"/campaigns", wrapper.CreateCampaign)

	router.Get(options.BaseURL+"/campaigns/organization", wrapper.GetCampaignsByOrganization)

	router.Get(options.BaseURL+"/campaigns/:campaignId/questions", wrapper.GetCampaignsCampaignIdQuestions)

	router.Post(options.BaseURL+"/campaigns/:campaignId/questions", wrapper.PostCampaignsCampaignIdQuestions)

	router.Delete(options.BaseURL+"/campaigns/:id", wrapper.DeleteCampaign)

	router.Get(options.BaseURL+"/campaigns/:id", wrapper.GetCampaignById)

	router.Put(options.BaseURL+"/campaigns/:id", wrapper.UpdateCampaign)

	router.Get(options.BaseURL+"/campaigns/:id/coupons", wrapper.GetCouponsByCampaign)

	router.Post(options.BaseURL+"/campaigns/:id/generate-tokens", wrapper.GenerateTokens)

	router.Get(options.BaseURL+"/customers", wrapper.GetAllCustomers)

	router.Post(options.BaseURL+"/customers", wrapper.CreateCustomer)

	router.Get(options.BaseURL+"/customers/organization", wrapper.GetCustomersByOrganization)

	router.Delete(options.BaseURL+"/customers/:id", wrapper.DeleteCustomer)

	router.Get(options.BaseURL+"/customers/:id", wrapper.GetCustomerById)

	router.Put(options.BaseURL+"/customers/:id", wrapper.UpdateCustomer)

	router.Get(options.BaseURL+"/organizations", wrapper.GetOrganizations)

	router.Post(options.BaseURL+"/organizations", wrapper.CreateOrganization)

	router.Get(options.BaseURL+"/organizations/search", wrapper.GetOrganizationByName)

	router.Delete(options.BaseURL+"/organizations/:organization_id", wrapper.DeleteOrganization)

	router.Get(options.BaseURL+"/organizations/:organization_id", wrapper.GetOrganizationById)

	router.Put(options.BaseURL+"/organizations/:organization_id", wrapper.UpdateOrganization)

	router.Get(options.BaseURL+"/organizations/:organization_id/users", wrapper.GetUsersByOrganization)

	router.Delete(options.BaseURL+"/questions/:questionId", wrapper.DeleteQuestionsQuestionId)

	router.Get(options.BaseURL+"/questions/:questionId/responses", wrapper.GetQuestionsQuestionIdResponses)

	router.Post(options.BaseURL+"/questions/:questionId/responses", wrapper.PostQuestionsQuestionIdResponses)

	router.Get(options.BaseURL+"/users", wrapper.GetUsers)

	router.Post(options.BaseURL+"/users", wrapper.CreateUser)

	router.Get(options.BaseURL+"/users/email", wrapper.GetUserByEmail)

	router.Delete(options.BaseURL+"/users/:user_id", wrapper.DeleteUser)

	router.Get(options.BaseURL+"/users/:user_id", wrapper.GetUserById)

	router.Put(options.BaseURL+"/users/:user_id", wrapper.UpdateUser)

	router.Put(options.BaseURL+"/users/:user_id/password", wrapper.UpdateUserPassword)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"jV0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
