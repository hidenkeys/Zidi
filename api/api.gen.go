// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for PaymentStatus.
const (
	Completed PaymentStatus = "completed"
	Failed    PaymentStatus = "failed"
	Pending   PaymentStatus = "pending"
)

// Defines values for QuestionType.
const (
	MultipleChoice QuestionType = "multiple_choice"
	Rating         QuestionType = "rating"
	Text           QuestionType = "text"
)

// Campaign defines model for Campaign.
type Campaign struct {
	Amount         float32            `json:"amount"`
	CampaignName   string             `json:"campaignName"`
	CharacterType  string             `json:"characterType"`
	CouponId       string             `json:"couponId"`
	CouponLength   int                `json:"couponLength"`
	CouponNumber   int                `json:"couponNumber"`
	Id             openapi_types.UUID `json:"id"`
	OrganizationId openapi_types.UUID `json:"organizationId"`
	Price          float32            `json:"price"`
	QuestionNumber int                `json:"questionNumber"`
	Status         string             `json:"status"`
	WelcomeMessage string             `json:"welcomeMessage"`
}

// Coupon defines model for Coupon.
type Coupon struct {
	CampaignId openapi_types.UUID `json:"campaignId"`
	Code       string             `json:"code"`
	Id         openapi_types.UUID `json:"id"`
	Redeemed   bool               `json:"redeemed"`
	RedeemedAt *time.Time         `json:"redeemedAt"`
}

// CreateUserRequestBody defines model for CreateUserRequestBody.
type CreateUserRequestBody struct {
	Address         string              `json:"address"`
	ConfirmPassword string              `json:"confirmPassword"`
	Email           openapi_types.Email `json:"email"`
	FirstName       string              `json:"firstName"`
	LastName        string              `json:"lastName"`
	OrganizationId  openapi_types.UUID  `json:"organization_id"`
	Password        string              `json:"password"`
	PhoneNumber     string              `json:"phoneNumber"`
	Role            string              `json:"role"`
}

// Customer defines model for Customer.
type Customer struct {
	Amount         float32             `json:"amount"`
	CampaignId     openapi_types.UUID  `json:"campaignId"`
	Email          openapi_types.Email `json:"email"`
	Feedback       string              `json:"feedback"`
	FirstName      string              `json:"firstName"`
	Id             openapi_types.UUID  `json:"id"`
	LastName       string              `json:"lastName"`
	Network        string              `json:"network"`
	OrganizationId openapi_types.UUID  `json:"organizationId"`
	Phone          string              `json:"phone"`
	Status         string              `json:"status"`
}

// Error defines model for Error.
type Error struct {
	ErrorCode string `json:"error_code"`
	Message   string `json:"message"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// Organization defines model for Organization.
type Organization struct {
	Address            string              `json:"address"`
	CompanyName        string              `json:"company_name"`
	CompanySize        int                 `json:"company_size"`
	ContactPersonName  string              `json:"contact_person_name"`
	ContactPersonPhone string              `json:"contact_person_phone"`
	Email              openapi_types.Email `json:"email"`
	Id                 openapi_types.UUID  `json:"id"`
	Industry           string              `json:"industry"`
}

// Payment defines model for Payment.
type Payment struct {
	Amount         float32            `json:"amount"`
	CampaignId     openapi_types.UUID `json:"campaign_id"`
	Id             openapi_types.UUID `json:"id"`
	OrganizationId openapi_types.UUID `json:"organization_id"`
	Status         PaymentStatus      `json:"status"`
	TransactionId  string             `json:"transaction_id"`
	TransactionRef string             `json:"transaction_ref"`
}

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// Question defines model for Question.
type Question struct {
	CampaignId openapi_types.UUID `json:"campaignId"`
	Id         openapi_types.UUID `json:"id"`
	Options    *[]string          `json:"options"`
	Text       string             `json:"text"`
	Type       QuestionType       `json:"type"`
}

// QuestionType defines model for Question.Type.
type QuestionType string

// Response defines model for Response.
type Response struct {
	Answer     string             `json:"answer"`
	CustomerId openapi_types.UUID `json:"customerId"`
	Id         openapi_types.UUID `json:"id"`
	QuestionId openapi_types.UUID `json:"questionId"`
}

// User defines model for User.
type User struct {
	Address        string              `json:"address"`
	Email          openapi_types.Email `json:"email"`
	Firstname      string              `json:"firstname"`
	Id             openapi_types.UUID  `json:"id"`
	Lastname       string              `json:"lastname"`
	OrganizationId openapi_types.UUID  `json:"organization_id"`
	Password       string              `json:"password"`
	Role           string              `json:"role"`
}

// BadRequestError defines model for BadRequestError.
type BadRequestError = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// GetAllCampaignsParams defines parameters for GetAllCampaigns.
type GetAllCampaignsParams struct {
	// Limit Number of campaigns to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of campaigns to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetCampaignsByOrganizationParams defines parameters for GetCampaignsByOrganization.
type GetCampaignsByOrganizationParams struct {
	// Limit Number of campaigns to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of campaigns to skip before starting to return results
	Offset         *int               `form:"offset,omitempty" json:"offset,omitempty"`
	OrganizationId openapi_types.UUID `form:"organizationId" json:"organizationId"`
}

// GetCampaignsCampaignIdQuestionsParams defines parameters for GetCampaignsCampaignIdQuestions.
type GetCampaignsCampaignIdQuestionsParams struct {
	// Limit Number of questions to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of questions to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostCampaignsCampaignIdQuestionsJSONBody defines parameters for PostCampaignsCampaignIdQuestions.
type PostCampaignsCampaignIdQuestionsJSONBody = []Question

// GetAllCustomersParams defines parameters for GetAllCustomers.
type GetAllCustomersParams struct {
	// Limit Number of campaigns to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of campaigns to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetCustomersByOrganizationParams defines parameters for GetCustomersByOrganization.
type GetCustomersByOrganizationParams struct {
	OrganizationId openapi_types.UUID `form:"organizationId" json:"organizationId"`

	// Limit Number of customers to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of customers to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostFlutterwaveWebhookJSONBody defines parameters for PostFlutterwaveWebhook.
type PostFlutterwaveWebhookJSONBody struct {
	// Data Payload containing transaction details
	Data *struct {
		// Amount Amount involved in the transaction
		Amount *int `json:"amount,omitempty"`

		// Id Unique transaction ID
		Id *int `json:"id,omitempty"`

		// Status Transaction status (e.g., successful, failed)
		Status *string `json:"status,omitempty"`

		// TxRef Transaction reference
		TxRef *string `json:"tx_ref,omitempty"`
	} `json:"data,omitempty"`

	// Event Type of event (e.g., charge.completed, transfer.successful)
	Event *string `json:"event,omitempty"`
}

// GetOrganizationsParams defines parameters for GetOrganizations.
type GetOrganizationsParams struct {
	// Limit Number of organizations to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of organizations to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetOrganizationByNameParams defines parameters for GetOrganizationByName.
type GetOrganizationByNameParams struct {
	Name string `form:"name" json:"name"`

	// Limit Number of organizations to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of organizations to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetUsersByOrganizationParams defines parameters for GetUsersByOrganization.
type GetUsersByOrganizationParams struct {
	// Limit Number of users to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of users to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetAllPaymentsParams defines parameters for GetAllPayments.
type GetAllPaymentsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPaymentsByOrganizationParams defines parameters for GetPaymentsByOrganization.
type GetPaymentsByOrganizationParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetQuestionsQuestionIdResponsesParams defines parameters for GetQuestionsQuestionIdResponses.
type GetQuestionsQuestionIdResponsesParams struct {
	// Limit Number of responses to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of responses to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Limit Number of users to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of users to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetUserByEmailParams defines parameters for GetUserByEmail.
type GetUserByEmailParams struct {
	Email openapi_types.Email `form:"email" json:"email"`
}

// UpdateUserPasswordJSONBody defines parameters for UpdateUserPassword.
type UpdateUserPasswordJSONBody struct {
	// NewPassword The new password to set.
	NewPassword string `json:"new_password"`

	// OldPassword The current password of the user.
	OldPassword string `json:"old_password"`
}

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginRequest

// SuperuserLoginJSONRequestBody defines body for SuperuserLogin for application/json ContentType.
type SuperuserLoginJSONRequestBody = LoginRequest

// CreateCampaignJSONRequestBody defines body for CreateCampaign for application/json ContentType.
type CreateCampaignJSONRequestBody = Campaign

// PostCampaignsCampaignIdQuestionsJSONRequestBody defines body for PostCampaignsCampaignIdQuestions for application/json ContentType.
type PostCampaignsCampaignIdQuestionsJSONRequestBody = PostCampaignsCampaignIdQuestionsJSONBody

// UpdateCampaignJSONRequestBody defines body for UpdateCampaign for application/json ContentType.
type UpdateCampaignJSONRequestBody = Campaign

// CreateCustomerJSONRequestBody defines body for CreateCustomer for application/json ContentType.
type CreateCustomerJSONRequestBody = Customer

// UpdateCustomerJSONRequestBody defines body for UpdateCustomer for application/json ContentType.
type UpdateCustomerJSONRequestBody = Customer

// PostFlutterwaveWebhookJSONRequestBody defines body for PostFlutterwaveWebhook for application/json ContentType.
type PostFlutterwaveWebhookJSONRequestBody PostFlutterwaveWebhookJSONBody

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody = Organization

// UpdateOrganizationJSONRequestBody defines body for UpdateOrganization for application/json ContentType.
type UpdateOrganizationJSONRequestBody = Organization

// CreatePaymentJSONRequestBody defines body for CreatePayment for application/json ContentType.
type CreatePaymentJSONRequestBody = Payment

// UpdatePaymentByIdJSONRequestBody defines body for UpdatePaymentById for application/json ContentType.
type UpdatePaymentByIdJSONRequestBody = Payment

// PostQuestionsQuestionIdResponsesJSONRequestBody defines body for PostQuestionsQuestionIdResponses for application/json ContentType.
type PostQuestionsQuestionIdResponsesJSONRequestBody = Response

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserRequestBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = User

// UpdateUserPasswordJSONRequestBody defines body for UpdateUserPassword for application/json ContentType.
type UpdateUserPasswordJSONRequestBody UpdateUserPasswordJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User login
	// (POST /auth/login)
	LoginUser(c *fiber.Ctx) error
	// User logout
	// (POST /auth/logout)
	LogoutUser(c *fiber.Ctx) error
	// Superuser login
	// (POST /auth/superuser/login)
	SuperuserLogin(c *fiber.Ctx) error
	// Get all campaigns
	// (GET /campaigns)
	GetAllCampaigns(c *fiber.Ctx, params GetAllCampaignsParams) error
	// Create a new campaign
	// (POST /campaigns)
	CreateCampaign(c *fiber.Ctx) error
	// Get all campaigns for a specific organization
	// (GET /campaigns/organization)
	GetCampaignsByOrganization(c *fiber.Ctx, params GetCampaignsByOrganizationParams) error
	// Get all questions for a campaign
	// (GET /campaigns/{campaignId}/questions)
	GetCampaignsCampaignIdQuestions(c *fiber.Ctx, campaignId openapi_types.UUID, params GetCampaignsCampaignIdQuestionsParams) error
	// Create a new question for a campaign
	// (POST /campaigns/{campaignId}/questions)
	PostCampaignsCampaignIdQuestions(c *fiber.Ctx, campaignId openapi_types.UUID) error
	// Delete a campaign by ID
	// (DELETE /campaigns/{id})
	DeleteCampaign(c *fiber.Ctx, id openapi_types.UUID) error
	// Get a campaign by ID
	// (GET /campaigns/{id})
	GetCampaignById(c *fiber.Ctx, id openapi_types.UUID) error
	// Update a campaign by ID
	// (PUT /campaigns/{id})
	UpdateCampaign(c *fiber.Ctx, id openapi_types.UUID) error
	// Get all coupons for a specific campaign
	// (GET /campaigns/{id}/coupons)
	GetCouponsByCampaign(c *fiber.Ctx, id openapi_types.UUID) error
	// Generate tokens for a campaign
	// (POST /campaigns/{id}/generate-tokens)
	GenerateTokens(c *fiber.Ctx, id openapi_types.UUID) error
	// Get all customers
	// (GET /customers)
	GetAllCustomers(c *fiber.Ctx, params GetAllCustomersParams) error
	// Create a new customer
	// (POST /customers)
	CreateCustomer(c *fiber.Ctx) error
	// Get all customers for a specific organization
	// (GET /customers/organization)
	GetCustomersByOrganization(c *fiber.Ctx, params GetCustomersByOrganizationParams) error
	// Delete a customer by ID
	// (DELETE /customers/{id})
	DeleteCustomer(c *fiber.Ctx, id openapi_types.UUID) error
	// Get a customer by ID
	// (GET /customers/{id})
	GetCustomerById(c *fiber.Ctx, id openapi_types.UUID) error
	// Update a customer by ID
	// (PUT /customers/{id})
	UpdateCustomer(c *fiber.Ctx, id openapi_types.UUID) error
	// Handle Flutterwave payment notifications
	// (POST /flutterwave/webhook)
	PostFlutterwaveWebhook(c *fiber.Ctx) error
	// Get all organizations
	// (GET /organizations)
	GetOrganizations(c *fiber.Ctx, params GetOrganizationsParams) error
	// Create an organization
	// (POST /organizations)
	CreateOrganization(c *fiber.Ctx) error
	// Get an organization by name
	// (GET /organizations/search)
	GetOrganizationByName(c *fiber.Ctx, params GetOrganizationByNameParams) error
	// Delete an organization
	// (DELETE /organizations/{organization_id})
	DeleteOrganization(c *fiber.Ctx, organizationId openapi_types.UUID) error
	// Get an organization by ID
	// (GET /organizations/{organization_id})
	GetOrganizationById(c *fiber.Ctx, organizationId openapi_types.UUID) error
	// Update an organization
	// (PUT /organizations/{organization_id})
	UpdateOrganization(c *fiber.Ctx, organizationId openapi_types.UUID) error
	// Get all users in an organization
	// (GET /organizations/{organization_id}/users)
	GetUsersByOrganization(c *fiber.Ctx, organizationId openapi_types.UUID, params GetUsersByOrganizationParams) error
	// Get all payments
	// (GET /payments)
	GetAllPayments(c *fiber.Ctx, params GetAllPaymentsParams) error
	// Create a new payment
	// (POST /payments)
	CreatePayment(c *fiber.Ctx) error
	// Get payments by organization ID
	// (GET /payments/organization/{organization_id})
	GetPaymentsByOrganization(c *fiber.Ctx, organizationId openapi_types.UUID, params GetPaymentsByOrganizationParams) error
	// Get a payment by ID
	// (GET /payments/{id})
	GetPaymentById(c *fiber.Ctx, id openapi_types.UUID) error
	// Update a payment by ID
	// (PUT /payments/{id})
	UpdatePaymentById(c *fiber.Ctx, id openapi_types.UUID) error
	// Delete a question
	// (DELETE /questions/{questionId})
	DeleteQuestionsQuestionId(c *fiber.Ctx, questionId openapi_types.UUID) error
	// Get all responses for a question
	// (GET /questions/{questionId}/responses)
	GetQuestionsQuestionIdResponses(c *fiber.Ctx, questionId openapi_types.UUID, params GetQuestionsQuestionIdResponsesParams) error
	// Create a response for a question
	// (POST /questions/{questionId}/responses)
	PostQuestionsQuestionIdResponses(c *fiber.Ctx, questionId openapi_types.UUID) error
	// Get all users
	// (GET /users)
	GetUsers(c *fiber.Ctx, params GetUsersParams) error
	// Create a user
	// (POST /users)
	CreateUser(c *fiber.Ctx) error
	// Get a user by email
	// (GET /users/email)
	GetUserByEmail(c *fiber.Ctx, params GetUserByEmailParams) error
	// Delete a user
	// (DELETE /users/{user_id})
	DeleteUser(c *fiber.Ctx, userId openapi_types.UUID) error
	// Get a user by ID
	// (GET /users/{user_id})
	GetUserById(c *fiber.Ctx, userId openapi_types.UUID) error
	// Update a user
	// (PUT /users/{user_id})
	UpdateUser(c *fiber.Ctx, userId openapi_types.UUID) error
	// Update user password
	// (PUT /users/{user_id}/password)
	UpdateUserPassword(c *fiber.Ctx, userId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.LoginUser(c)
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.LogoutUser(c)
}

// SuperuserLogin operation middleware
func (siw *ServerInterfaceWrapper) SuperuserLogin(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.SuperuserLogin(c)
}

// GetAllCampaigns operation middleware
func (siw *ServerInterfaceWrapper) GetAllCampaigns(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllCampaignsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetAllCampaigns(c, params)
}

// CreateCampaign operation middleware
func (siw *ServerInterfaceWrapper) CreateCampaign(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateCampaign(c)
}

// GetCampaignsByOrganization operation middleware
func (siw *ServerInterfaceWrapper) GetCampaignsByOrganization(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignsByOrganizationParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Required query parameter "organizationId" -------------

	if paramValue := c.Query("organizationId"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument organizationId is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "organizationId", query, &params.OrganizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organizationId: %w", err).Error())
	}

	return siw.Handler.GetCampaignsByOrganization(c, params)
}

// GetCampaignsCampaignIdQuestions operation middleware
func (siw *ServerInterfaceWrapper) GetCampaignsCampaignIdQuestions(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "campaignId" -------------
	var campaignId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "campaignId", c.Params("campaignId"), &campaignId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter campaignId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignsCampaignIdQuestionsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetCampaignsCampaignIdQuestions(c, campaignId, params)
}

// PostCampaignsCampaignIdQuestions operation middleware
func (siw *ServerInterfaceWrapper) PostCampaignsCampaignIdQuestions(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "campaignId" -------------
	var campaignId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "campaignId", c.Params("campaignId"), &campaignId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter campaignId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostCampaignsCampaignIdQuestions(c, campaignId)
}

// DeleteCampaign operation middleware
func (siw *ServerInterfaceWrapper) DeleteCampaign(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteCampaign(c, id)
}

// GetCampaignById operation middleware
func (siw *ServerInterfaceWrapper) GetCampaignById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetCampaignById(c, id)
}

// UpdateCampaign operation middleware
func (siw *ServerInterfaceWrapper) UpdateCampaign(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateCampaign(c, id)
}

// GetCouponsByCampaign operation middleware
func (siw *ServerInterfaceWrapper) GetCouponsByCampaign(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetCouponsByCampaign(c, id)
}

// GenerateTokens operation middleware
func (siw *ServerInterfaceWrapper) GenerateTokens(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GenerateTokens(c, id)
}

// GetAllCustomers operation middleware
func (siw *ServerInterfaceWrapper) GetAllCustomers(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllCustomersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetAllCustomers(c, params)
}

// CreateCustomer operation middleware
func (siw *ServerInterfaceWrapper) CreateCustomer(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateCustomer(c)
}

// GetCustomersByOrganization operation middleware
func (siw *ServerInterfaceWrapper) GetCustomersByOrganization(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomersByOrganizationParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "organizationId" -------------

	if paramValue := c.Query("organizationId"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument organizationId is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "organizationId", query, &params.OrganizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organizationId: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetCustomersByOrganization(c, params)
}

// DeleteCustomer operation middleware
func (siw *ServerInterfaceWrapper) DeleteCustomer(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteCustomer(c, id)
}

// GetCustomerById operation middleware
func (siw *ServerInterfaceWrapper) GetCustomerById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetCustomerById(c, id)
}

// UpdateCustomer operation middleware
func (siw *ServerInterfaceWrapper) UpdateCustomer(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateCustomer(c, id)
}

// PostFlutterwaveWebhook operation middleware
func (siw *ServerInterfaceWrapper) PostFlutterwaveWebhook(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostFlutterwaveWebhook(c)
}

// GetOrganizations operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizations(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrganizationsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetOrganizations(c, params)
}

// CreateOrganization operation middleware
func (siw *ServerInterfaceWrapper) CreateOrganization(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateOrganization(c)
}

// GetOrganizationByName operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizationByName(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrganizationByNameParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "name" -------------

	if paramValue := c.Query("name"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument name is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetOrganizationByName(c, params)
}

// DeleteOrganization operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrganization(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "organization_id" -------------
	var organizationId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "organization_id", c.Params("organization_id"), &organizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organization_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteOrganization(c, organizationId)
}

// GetOrganizationById operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizationById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "organization_id" -------------
	var organizationId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "organization_id", c.Params("organization_id"), &organizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organization_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetOrganizationById(c, organizationId)
}

// UpdateOrganization operation middleware
func (siw *ServerInterfaceWrapper) UpdateOrganization(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "organization_id" -------------
	var organizationId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "organization_id", c.Params("organization_id"), &organizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organization_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateOrganization(c, organizationId)
}

// GetUsersByOrganization operation middleware
func (siw *ServerInterfaceWrapper) GetUsersByOrganization(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "organization_id" -------------
	var organizationId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "organization_id", c.Params("organization_id"), &organizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organization_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersByOrganizationParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetUsersByOrganization(c, organizationId, params)
}

// GetAllPayments operation middleware
func (siw *ServerInterfaceWrapper) GetAllPayments(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllPaymentsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetAllPayments(c, params)
}

// CreatePayment operation middleware
func (siw *ServerInterfaceWrapper) CreatePayment(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreatePayment(c)
}

// GetPaymentsByOrganization operation middleware
func (siw *ServerInterfaceWrapper) GetPaymentsByOrganization(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "organization_id" -------------
	var organizationId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "organization_id", c.Params("organization_id"), &organizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organization_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPaymentsByOrganizationParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetPaymentsByOrganization(c, organizationId, params)
}

// GetPaymentById operation middleware
func (siw *ServerInterfaceWrapper) GetPaymentById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetPaymentById(c, id)
}

// UpdatePaymentById operation middleware
func (siw *ServerInterfaceWrapper) UpdatePaymentById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdatePaymentById(c, id)
}

// DeleteQuestionsQuestionId operation middleware
func (siw *ServerInterfaceWrapper) DeleteQuestionsQuestionId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "questionId" -------------
	var questionId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "questionId", c.Params("questionId"), &questionId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter questionId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteQuestionsQuestionId(c, questionId)
}

// GetQuestionsQuestionIdResponses operation middleware
func (siw *ServerInterfaceWrapper) GetQuestionsQuestionIdResponses(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "questionId" -------------
	var questionId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "questionId", c.Params("questionId"), &questionId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter questionId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQuestionsQuestionIdResponsesParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetQuestionsQuestionIdResponses(c, questionId, params)
}

// PostQuestionsQuestionIdResponses operation middleware
func (siw *ServerInterfaceWrapper) PostQuestionsQuestionIdResponses(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "questionId" -------------
	var questionId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "questionId", c.Params("questionId"), &questionId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter questionId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostQuestionsQuestionIdResponses(c, questionId)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetUsers(c, params)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateUser(c)
}

// GetUserByEmail operation middleware
func (siw *ServerInterfaceWrapper) GetUserByEmail(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserByEmailParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "email" -------------

	if paramValue := c.Query("email"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument email is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "email", query, &params.Email)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter email: %w", err).Error())
	}

	return siw.Handler.GetUserByEmail(c, params)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteUser(c, userId)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetUserById(c, userId)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateUser(c, userId)
}

// UpdateUserPassword operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserPassword(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateUserPassword(c, userId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/auth/login", wrapper.LoginUser)

	router.Post(options.BaseURL+"/auth/logout", wrapper.LogoutUser)

	router.Post(options.BaseURL+"/auth/superuser/login", wrapper.SuperuserLogin)

	router.Get(options.BaseURL+"/campaigns", wrapper.GetAllCampaigns)

	router.Post(options.BaseURL+"/campaigns", wrapper.CreateCampaign)

	router.Get(options.BaseURL+"/campaigns/organization", wrapper.GetCampaignsByOrganization)

	router.Get(options.BaseURL+"/campaigns/:campaignId/questions", wrapper.GetCampaignsCampaignIdQuestions)

	router.Post(options.BaseURL+"/campaigns/:campaignId/questions", wrapper.PostCampaignsCampaignIdQuestions)

	router.Delete(options.BaseURL+"/campaigns/:id", wrapper.DeleteCampaign)

	router.Get(options.BaseURL+"/campaigns/:id", wrapper.GetCampaignById)

	router.Put(options.BaseURL+"/campaigns/:id", wrapper.UpdateCampaign)

	router.Get(options.BaseURL+"/campaigns/:id/coupons", wrapper.GetCouponsByCampaign)

	router.Post(options.BaseURL+"/campaigns/:id/generate-tokens", wrapper.GenerateTokens)

	router.Get(options.BaseURL+"/customers", wrapper.GetAllCustomers)

	router.Post(options.BaseURL+"/customers", wrapper.CreateCustomer)

	router.Get(options.BaseURL+"/customers/organization", wrapper.GetCustomersByOrganization)

	router.Delete(options.BaseURL+"/customers/:id", wrapper.DeleteCustomer)

	router.Get(options.BaseURL+"/customers/:id", wrapper.GetCustomerById)

	router.Put(options.BaseURL+"/customers/:id", wrapper.UpdateCustomer)

	router.Post(options.BaseURL+"/flutterwave/webhook", wrapper.PostFlutterwaveWebhook)

	router.Get(options.BaseURL+"/organizations", wrapper.GetOrganizations)

	router.Post(options.BaseURL+"/organizations", wrapper.CreateOrganization)

	router.Get(options.BaseURL+"/organizations/search", wrapper.GetOrganizationByName)

	router.Delete(options.BaseURL+"/organizations/:organization_id", wrapper.DeleteOrganization)

	router.Get(options.BaseURL+"/organizations/:organization_id", wrapper.GetOrganizationById)

	router.Put(options.BaseURL+"/organizations/:organization_id", wrapper.UpdateOrganization)

	router.Get(options.BaseURL+"/organizations/:organization_id/users", wrapper.GetUsersByOrganization)

	router.Get(options.BaseURL+"/payments", wrapper.GetAllPayments)

	router.Post(options.BaseURL+"/payments", wrapper.CreatePayment)

	router.Get(options.BaseURL+"/payments/organization/:organization_id", wrapper.GetPaymentsByOrganization)

	router.Get(options.BaseURL+"/payments/:id", wrapper.GetPaymentById)

	router.Put(options.BaseURL+"/payments/:id", wrapper.UpdatePaymentById)

	router.Delete(options.BaseURL+"/questions/:questionId", wrapper.DeleteQuestionsQuestionId)

	router.Get(options.BaseURL+"/questions/:questionId/responses", wrapper.GetQuestionsQuestionIdResponses)

	router.Post(options.BaseURL+"/questions/:questionId/responses", wrapper.PostQuestionsQuestionIdResponses)

	router.Get(options.BaseURL+"/users", wrapper.GetUsers)

	router.Post(options.BaseURL+"/users", wrapper.CreateUser)

	router.Get(options.BaseURL+"/users/email", wrapper.GetUserByEmail)

	router.Delete(options.BaseURL+"/users/:user_id", wrapper.DeleteUser)

	router.Get(options.BaseURL+"/users/:user_id", wrapper.GetUserById)

	router.Put(options.BaseURL+"/users/:user_id", wrapper.UpdateUser)

	router.Put(options.BaseURL+"/users/:user_id/password", wrapper.UpdateUserPassword)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
