// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusCompleted PaymentStatus = "completed"
	PaymentStatusFailed    PaymentStatus = "failed"
	PaymentStatusPending   PaymentStatus = "pending"
)

// Defines values for QuestionType.
const (
	MultipleChoice QuestionType = "multiple_choice"
	Rating         QuestionType = "rating"
	Text           QuestionType = "text"
)

// Defines values for TransactionStatus.
const (
	TransactionStatusFailed  TransactionStatus = "failed"
	TransactionStatusPending TransactionStatus = "pending"
	TransactionStatusSuccess TransactionStatus = "success"
)

// Defines values for TransactionType.
const (
	TransactionTypeAirtime TransactionType = "airtime"
)

// Defines values for TransactionInputStatus.
const (
	TransactionInputStatusFailed  TransactionInputStatus = "failed"
	TransactionInputStatusPending TransactionInputStatus = "pending"
	TransactionInputStatusSuccess TransactionInputStatus = "success"
)

// Defines values for TransactionInputType.
const (
	TransactionInputTypeAirtime TransactionInputType = "airtime"
)

// Defines values for TransactionStatusUpdateStatus.
const (
	TransactionStatusUpdateStatusFailed     TransactionStatusUpdateStatus = "failed"
	TransactionStatusUpdateStatusPending    TransactionStatusUpdateStatus = "pending"
	TransactionStatusUpdateStatusSuccessful TransactionStatusUpdateStatus = "successful"
)

// Balance defines model for Balance.
type Balance struct {
	Amount          float32            `json:"amount"`
	CampaignId      openapi_types.UUID `json:"campaignId"`
	Id              openapi_types.UUID `json:"id"`
	StartingBalance float32            `json:"startingBalance"`
}

// Campaign defines model for Campaign.
type Campaign struct {
	Amount         float32            `json:"amount"`
	CampaignName   string             `json:"campaignName"`
	CharacterType  string             `json:"characterType"`
	CouponId       string             `json:"couponId"`
	CouponLength   int                `json:"couponLength"`
	CouponNumber   int                `json:"couponNumber"`
	CreatedAt      *time.Time         `json:"createdAt"`
	Id             openapi_types.UUID `json:"id"`
	OrganizationId openapi_types.UUID `json:"organizationId"`
	Price          float32            `json:"price"`
	QuestionNumber int                `json:"questionNumber"`
	Status         string             `json:"status"`
	WelcomeMessage string             `json:"welcomeMessage"`
}

// Coupon defines model for Coupon.
type Coupon struct {
	CampaignId openapi_types.UUID `json:"campaignId"`
	Code       string             `json:"code"`
	Id         openapi_types.UUID `json:"id"`
	Redeemed   bool               `json:"redeemed"`
	RedeemedAt *time.Time         `json:"redeemedAt"`
}

// CreateBalanceRequest defines model for CreateBalanceRequest.
type CreateBalanceRequest struct {
	Amount          float32            `json:"amount"`
	CampaignId      openapi_types.UUID `json:"campaignId"`
	StartingBalance float32            `json:"startingBalance"`
}

// CreateUserRequestBody defines model for CreateUserRequestBody.
type CreateUserRequestBody struct {
	Address         string              `json:"address"`
	ConfirmPassword string              `json:"confirmPassword"`
	Email           openapi_types.Email `json:"email"`
	FirstName       string              `json:"firstName"`
	LastName        string              `json:"lastName"`
	OrganizationId  openapi_types.UUID  `json:"organization_id"`
	Password        string              `json:"password"`
	PhoneNumber     string              `json:"phoneNumber"`
	Role            string              `json:"role"`
}

// Customer defines model for Customer.
type Customer struct {
	Amount         float32             `json:"amount"`
	CampaignId     openapi_types.UUID  `json:"campaignId"`
	Email          openapi_types.Email `json:"email"`
	Feedback       string              `json:"feedback"`
	FirstName      string              `json:"firstName"`
	Id             openapi_types.UUID  `json:"id"`
	LastName       string              `json:"lastName"`
	Network        string              `json:"network"`
	OrganizationId openapi_types.UUID  `json:"organizationId"`
	Phone          string              `json:"phone"`
	Status         string              `json:"status"`
}

// Error defines model for Error.
type Error struct {
	ErrorCode string `json:"error_code"`
	Message   string `json:"message"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// Organization defines model for Organization.
type Organization struct {
	Address            string              `json:"address"`
	CompanyName        string              `json:"company_name"`
	CompanySize        int                 `json:"company_size"`
	ContactPersonName  string              `json:"contact_person_name"`
	ContactPersonPhone string              `json:"contact_person_phone"`
	Email              openapi_types.Email `json:"email"`
	Id                 openapi_types.UUID  `json:"id"`
	Industry           string              `json:"industry"`
}

// Payment defines model for Payment.
type Payment struct {
	Amount         float32            `json:"amount"`
	CampaignId     openapi_types.UUID `json:"campaign_id"`
	Id             openapi_types.UUID `json:"id"`
	OrganizationId openapi_types.UUID `json:"organization_id"`
	Status         PaymentStatus      `json:"status"`
	TransactionId  string             `json:"transaction_id"`
	TransactionRef string             `json:"transaction_ref"`
}

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// Question defines model for Question.
type Question struct {
	CampaignId openapi_types.UUID `json:"campaignId"`
	Id         openapi_types.UUID `json:"id"`
	Options    *[]string          `json:"options"`
	Text       string             `json:"text"`
	Type       QuestionType       `json:"type"`
}

// QuestionType defines model for Question.Type.
type QuestionType string

// Response defines model for Response.
type Response struct {
	Answer     string             `json:"answer"`
	CustomerId openapi_types.UUID `json:"customerId"`
	Id         openapi_types.UUID `json:"id"`
	QuestionId openapi_types.UUID `json:"questionId"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	Amount         float32            `json:"amount"`
	CampaignId     openapi_types.UUID `json:"campaignId"`
	Commisson      float32            `json:"commisson"`
	CustomerId     openapi_types.UUID `json:"customerId"`
	Id             openapi_types.UUID `json:"id"`
	Network        string             `json:"network"`
	OrganizationId openapi_types.UUID `json:"organizationId"`
	PhoneNumber    string             `json:"phoneNumber"`
	Status         TransactionStatus  `json:"status"`
	TxReference    string             `json:"txReference"`
	Type           TransactionType    `json:"type"`
}

// TransactionStatus defines model for Transaction.Status.
type TransactionStatus string

// TransactionType defines model for Transaction.Type.
type TransactionType string

// TransactionInput defines model for TransactionInput.
type TransactionInput struct {
	Amount         float32                `json:"amount"`
	CampaignId     openapi_types.UUID     `json:"campaignId"`
	Commisson      float32                `json:"commisson"`
	CustomerId     openapi_types.UUID     `json:"customerId"`
	Network        string                 `json:"network"`
	OrganizationId openapi_types.UUID     `json:"organizationId"`
	PhoneNumber    string                 `json:"phoneNumber"`
	Status         TransactionInputStatus `json:"status"`
	TxReference    string                 `json:"txReference"`
	Type           TransactionInputType   `json:"type"`
}

// TransactionInputStatus defines model for TransactionInput.Status.
type TransactionInputStatus string

// TransactionInputType defines model for TransactionInput.Type.
type TransactionInputType string

// TransactionStatusUpdate defines model for TransactionStatusUpdate.
type TransactionStatusUpdate struct {
	Status TransactionStatusUpdateStatus `json:"status"`
}

// TransactionStatusUpdateStatus defines model for TransactionStatusUpdate.Status.
type TransactionStatusUpdateStatus string

// UpdateBalanceRequest defines model for UpdateBalanceRequest.
type UpdateBalanceRequest struct {
	Amount float32 `json:"amount"`
}

// User defines model for User.
type User struct {
	Address        string              `json:"address"`
	Email          openapi_types.Email `json:"email"`
	Firstname      string              `json:"firstname"`
	Id             openapi_types.UUID  `json:"id"`
	Lastname       string              `json:"lastname"`
	OrganizationId openapi_types.UUID  `json:"organization_id"`
	Password       string              `json:"password"`
	Role           string              `json:"role"`
}

// BadRequestError defines model for BadRequestError.
type BadRequestError = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// GetAllBalancesParams defines parameters for GetAllBalances.
type GetAllBalancesParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetAllCampaignsParams defines parameters for GetAllCampaigns.
type GetAllCampaignsParams struct {
	// Limit Number of campaigns to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of campaigns to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetCampaignsByOrganizationParams defines parameters for GetCampaignsByOrganization.
type GetCampaignsByOrganizationParams struct {
	// Limit Number of campaigns to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of campaigns to skip before starting to return results
	Offset         *int               `form:"offset,omitempty" json:"offset,omitempty"`
	OrganizationId openapi_types.UUID `form:"organizationId" json:"organizationId"`
}

// GetCampaignsCampaignIdQuestionsParams defines parameters for GetCampaignsCampaignIdQuestions.
type GetCampaignsCampaignIdQuestionsParams struct {
	// Limit Number of questions to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of questions to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostCampaignsCampaignIdQuestionsJSONBody defines parameters for PostCampaignsCampaignIdQuestions.
type PostCampaignsCampaignIdQuestionsJSONBody = []Question

// GetAllCustomersParams defines parameters for GetAllCustomers.
type GetAllCustomersParams struct {
	// Limit Number of campaigns to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of campaigns to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetCustomersByOrganizationParams defines parameters for GetCustomersByOrganization.
type GetCustomersByOrganizationParams struct {
	OrganizationId openapi_types.UUID `form:"organizationId" json:"organizationId"`

	// Limit Number of customers to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of customers to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostFlutterwaveWebhookJSONBody defines parameters for PostFlutterwaveWebhook.
type PostFlutterwaveWebhookJSONBody struct {
	// Data Payload containing transaction details
	Data *struct {
		// Amount Amount involved in the transaction
		Amount *int `json:"amount,omitempty"`

		// Id Unique transaction ID
		Id *int `json:"id,omitempty"`

		// Status Transaction status (e.g., successful, failed)
		Status *string `json:"status,omitempty"`

		// TxRef Transaction reference
		TxRef *string `json:"tx_ref,omitempty"`
	} `json:"data,omitempty"`

	// Event Type of event (e.g., charge.completed, transfer.successful)
	Event *string `json:"event,omitempty"`
}

// GetOrganizationsParams defines parameters for GetOrganizations.
type GetOrganizationsParams struct {
	// Limit Number of organizations to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of organizations to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetOrganizationByNameParams defines parameters for GetOrganizationByName.
type GetOrganizationByNameParams struct {
	Name string `form:"name" json:"name"`

	// Limit Number of organizations to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of organizations to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetUsersByOrganizationParams defines parameters for GetUsersByOrganization.
type GetUsersByOrganizationParams struct {
	// Limit Number of users to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of users to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetAllPaymentsParams defines parameters for GetAllPayments.
type GetAllPaymentsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPaymentsByOrganizationParams defines parameters for GetPaymentsByOrganization.
type GetPaymentsByOrganizationParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetQuestionsQuestionIdResponsesParams defines parameters for GetQuestionsQuestionIdResponses.
type GetQuestionsQuestionIdResponsesParams struct {
	// Limit Number of responses to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of responses to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListTransactionsParams defines parameters for ListTransactions.
type ListTransactionsParams struct {
	// Limit Number of transactions to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of transactions to skip for pagination.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Limit Number of users to return (pagination)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of users to skip before starting to return results
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetUserByEmailParams defines parameters for GetUserByEmail.
type GetUserByEmailParams struct {
	Email openapi_types.Email `form:"email" json:"email"`
}

// UpdateUserPasswordJSONBody defines parameters for UpdateUserPassword.
type UpdateUserPasswordJSONBody struct {
	// NewPassword The new password to set.
	NewPassword string `json:"new_password"`

	// OldPassword The current password of the user.
	OldPassword string `json:"old_password"`
}

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginRequest

// SuperuserLoginJSONRequestBody defines body for SuperuserLogin for application/json ContentType.
type SuperuserLoginJSONRequestBody = LoginRequest

// CreateBalanceJSONRequestBody defines body for CreateBalance for application/json ContentType.
type CreateBalanceJSONRequestBody = CreateBalanceRequest

// UpdateBalanceJSONRequestBody defines body for UpdateBalance for application/json ContentType.
type UpdateBalanceJSONRequestBody = UpdateBalanceRequest

// CreateCampaignJSONRequestBody defines body for CreateCampaign for application/json ContentType.
type CreateCampaignJSONRequestBody = Campaign

// PostCampaignsCampaignIdQuestionsJSONRequestBody defines body for PostCampaignsCampaignIdQuestions for application/json ContentType.
type PostCampaignsCampaignIdQuestionsJSONRequestBody = PostCampaignsCampaignIdQuestionsJSONBody

// UpdateCampaignJSONRequestBody defines body for UpdateCampaign for application/json ContentType.
type UpdateCampaignJSONRequestBody = Campaign

// CreateCustomerJSONRequestBody defines body for CreateCustomer for application/json ContentType.
type CreateCustomerJSONRequestBody = Customer

// UpdateCustomerJSONRequestBody defines body for UpdateCustomer for application/json ContentType.
type UpdateCustomerJSONRequestBody = Customer

// PostFlutterwaveWebhookJSONRequestBody defines body for PostFlutterwaveWebhook for application/json ContentType.
type PostFlutterwaveWebhookJSONRequestBody PostFlutterwaveWebhookJSONBody

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody = Organization

// UpdateOrganizationJSONRequestBody defines body for UpdateOrganization for application/json ContentType.
type UpdateOrganizationJSONRequestBody = Organization

// CreatePaymentJSONRequestBody defines body for CreatePayment for application/json ContentType.
type CreatePaymentJSONRequestBody = Payment

// UpdatePaymentByIdJSONRequestBody defines body for UpdatePaymentById for application/json ContentType.
type UpdatePaymentByIdJSONRequestBody = Payment

// PostQuestionsQuestionIdResponsesJSONRequestBody defines body for PostQuestionsQuestionIdResponses for application/json ContentType.
type PostQuestionsQuestionIdResponsesJSONRequestBody = Response

// CreateTransactionJSONRequestBody defines body for CreateTransaction for application/json ContentType.
type CreateTransactionJSONRequestBody = TransactionInput

// UpdateTransactionStatusJSONRequestBody defines body for UpdateTransactionStatus for application/json ContentType.
type UpdateTransactionStatusJSONRequestBody = TransactionStatusUpdate

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserRequestBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = User

// UpdateUserPasswordJSONRequestBody defines body for UpdateUserPassword for application/json ContentType.
type UpdateUserPasswordJSONRequestBody UpdateUserPasswordJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User login
	// (POST /auth/login)
	LoginUser(c *fiber.Ctx) error
	// User logout
	// (POST /auth/logout)
	LogoutUser(c *fiber.Ctx) error
	// Superuser login
	// (POST /auth/superuser/login)
	SuperuserLogin(c *fiber.Ctx) error
	// Get all balances
	// (GET /balances)
	GetAllBalances(c *fiber.Ctx, params GetAllBalancesParams) error
	// Create a new balance
	// (POST /balances)
	CreateBalance(c *fiber.Ctx) error
	// Get balance by campaign
	// (GET /balances/{campaignId})
	GetBalanceByCampaign(c *fiber.Ctx, campaignId openapi_types.UUID) error
	// Update balance by campaign
	// (PATCH /balances/{campaignId})
	UpdateBalance(c *fiber.Ctx, campaignId openapi_types.UUID) error
	// Get all campaigns
	// (GET /campaigns)
	GetAllCampaigns(c *fiber.Ctx, params GetAllCampaignsParams) error
	// Create a new campaign
	// (POST /campaigns)
	CreateCampaign(c *fiber.Ctx) error
	// Get all campaigns for a specific organization
	// (GET /campaigns/organization)
	GetCampaignsByOrganization(c *fiber.Ctx, params GetCampaignsByOrganizationParams) error
	// Get all questions for a campaign
	// (GET /campaigns/{campaignId}/questions)
	GetCampaignsCampaignIdQuestions(c *fiber.Ctx, campaignId openapi_types.UUID, params GetCampaignsCampaignIdQuestionsParams) error
	// Create a new question for a campaign
	// (POST /campaigns/{campaignId}/questions)
	PostCampaignsCampaignIdQuestions(c *fiber.Ctx, campaignId openapi_types.UUID) error
	// Delete a campaign by ID
	// (DELETE /campaigns/{id})
	DeleteCampaign(c *fiber.Ctx, id openapi_types.UUID) error
	// Get a campaign by ID
	// (GET /campaigns/{id})
	GetCampaignById(c *fiber.Ctx, id openapi_types.UUID) error
	// Update a campaign by ID
	// (PUT /campaigns/{id})
	UpdateCampaign(c *fiber.Ctx, id openapi_types.UUID) error
	// Get all coupons for a specific campaign
	// (GET /campaigns/{id}/coupons)
	GetCouponsByCampaign(c *fiber.Ctx, id openapi_types.UUID) error
	// Generate tokens for a campaign
	// (POST /campaigns/{id}/generate-tokens)
	GenerateTokens(c *fiber.Ctx, id openapi_types.UUID) error
	// Get all customers
	// (GET /customers)
	GetAllCustomers(c *fiber.Ctx, params GetAllCustomersParams) error
	// Create a new customer
	// (POST /customers)
	CreateCustomer(c *fiber.Ctx) error
	// Get all customers for a specific organization
	// (GET /customers/organization)
	GetCustomersByOrganization(c *fiber.Ctx, params GetCustomersByOrganizationParams) error
	// Delete a customer by ID
	// (DELETE /customers/{id})
	DeleteCustomer(c *fiber.Ctx, id openapi_types.UUID) error
	// Get a customer by ID
	// (GET /customers/{id})
	GetCustomerById(c *fiber.Ctx, id openapi_types.UUID) error
	// Update a customer by ID
	// (PUT /customers/{id})
	UpdateCustomer(c *fiber.Ctx, id openapi_types.UUID) error
	// Handle Flutterwave payment notifications
	// (POST /flutterwave/webhook)
	PostFlutterwaveWebhook(c *fiber.Ctx) error
	// Get all organizations
	// (GET /organizations)
	GetOrganizations(c *fiber.Ctx, params GetOrganizationsParams) error
	// Create an organization
	// (POST /organizations)
	CreateOrganization(c *fiber.Ctx) error
	// Get an organization by name
	// (GET /organizations/search)
	GetOrganizationByName(c *fiber.Ctx, params GetOrganizationByNameParams) error
	// Delete an organization
	// (DELETE /organizations/{organization_id})
	DeleteOrganization(c *fiber.Ctx, organizationId openapi_types.UUID) error
	// Get an organization by ID
	// (GET /organizations/{organization_id})
	GetOrganizationById(c *fiber.Ctx, organizationId openapi_types.UUID) error
	// Update an organization
	// (PUT /organizations/{organization_id})
	UpdateOrganization(c *fiber.Ctx, organizationId openapi_types.UUID) error
	// Get all users in an organization
	// (GET /organizations/{organization_id}/users)
	GetUsersByOrganization(c *fiber.Ctx, organizationId openapi_types.UUID, params GetUsersByOrganizationParams) error
	// Get all payments
	// (GET /payments)
	GetAllPayments(c *fiber.Ctx, params GetAllPaymentsParams) error
	// Create a new payment
	// (POST /payments)
	CreatePayment(c *fiber.Ctx) error
	// Get payments by organization ID
	// (GET /payments/organization/{organization_id})
	GetPaymentsByOrganization(c *fiber.Ctx, organizationId openapi_types.UUID, params GetPaymentsByOrganizationParams) error
	// Get a payment by ID
	// (GET /payments/{id})
	GetPaymentById(c *fiber.Ctx, id openapi_types.UUID) error
	// Update a payment by ID
	// (PUT /payments/{id})
	UpdatePaymentById(c *fiber.Ctx, id openapi_types.UUID) error
	// Delete a question
	// (DELETE /questions/{questionId})
	DeleteQuestionsQuestionId(c *fiber.Ctx, questionId openapi_types.UUID) error
	// Get all responses for a question
	// (GET /questions/{questionId}/responses)
	GetQuestionsQuestionIdResponses(c *fiber.Ctx, questionId openapi_types.UUID, params GetQuestionsQuestionIdResponsesParams) error
	// Create a response for a question
	// (POST /questions/{questionId}/responses)
	PostQuestionsQuestionIdResponses(c *fiber.Ctx, questionId openapi_types.UUID) error
	// Get all transactions
	// (GET /transactions)
	ListTransactions(c *fiber.Ctx, params ListTransactionsParams) error
	// Create a new transaction
	// (POST /transactions)
	CreateTransaction(c *fiber.Ctx) error
	// Get a transaction by ID
	// (GET /transactions/{transactionId})
	GetTransaction(c *fiber.Ctx, transactionId openapi_types.UUID) error
	// Update transaction status
	// (PATCH /transactions/{transactionId})
	UpdateTransactionStatus(c *fiber.Ctx, transactionId openapi_types.UUID) error
	// Get all users
	// (GET /users)
	GetUsers(c *fiber.Ctx, params GetUsersParams) error
	// Create a user
	// (POST /users)
	CreateUser(c *fiber.Ctx) error
	// Get a user by email
	// (GET /users/email)
	GetUserByEmail(c *fiber.Ctx, params GetUserByEmailParams) error
	// Delete a user
	// (DELETE /users/{user_id})
	DeleteUser(c *fiber.Ctx, userId openapi_types.UUID) error
	// Get a user by ID
	// (GET /users/{user_id})
	GetUserById(c *fiber.Ctx, userId openapi_types.UUID) error
	// Update a user
	// (PUT /users/{user_id})
	UpdateUser(c *fiber.Ctx, userId openapi_types.UUID) error
	// Update user password
	// (PUT /users/{user_id}/password)
	UpdateUserPassword(c *fiber.Ctx, userId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.LoginUser(c)
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.LogoutUser(c)
}

// SuperuserLogin operation middleware
func (siw *ServerInterfaceWrapper) SuperuserLogin(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.SuperuserLogin(c)
}

// GetAllBalances operation middleware
func (siw *ServerInterfaceWrapper) GetAllBalances(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllBalancesParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetAllBalances(c, params)
}

// CreateBalance operation middleware
func (siw *ServerInterfaceWrapper) CreateBalance(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateBalance(c)
}

// GetBalanceByCampaign operation middleware
func (siw *ServerInterfaceWrapper) GetBalanceByCampaign(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "campaignId" -------------
	var campaignId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "campaignId", c.Params("campaignId"), &campaignId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter campaignId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetBalanceByCampaign(c, campaignId)
}

// UpdateBalance operation middleware
func (siw *ServerInterfaceWrapper) UpdateBalance(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "campaignId" -------------
	var campaignId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "campaignId", c.Params("campaignId"), &campaignId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter campaignId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateBalance(c, campaignId)
}

// GetAllCampaigns operation middleware
func (siw *ServerInterfaceWrapper) GetAllCampaigns(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllCampaignsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetAllCampaigns(c, params)
}

// CreateCampaign operation middleware
func (siw *ServerInterfaceWrapper) CreateCampaign(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateCampaign(c)
}

// GetCampaignsByOrganization operation middleware
func (siw *ServerInterfaceWrapper) GetCampaignsByOrganization(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignsByOrganizationParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Required query parameter "organizationId" -------------

	if paramValue := c.Query("organizationId"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument organizationId is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "organizationId", query, &params.OrganizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organizationId: %w", err).Error())
	}

	return siw.Handler.GetCampaignsByOrganization(c, params)
}

// GetCampaignsCampaignIdQuestions operation middleware
func (siw *ServerInterfaceWrapper) GetCampaignsCampaignIdQuestions(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "campaignId" -------------
	var campaignId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "campaignId", c.Params("campaignId"), &campaignId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter campaignId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignsCampaignIdQuestionsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetCampaignsCampaignIdQuestions(c, campaignId, params)
}

// PostCampaignsCampaignIdQuestions operation middleware
func (siw *ServerInterfaceWrapper) PostCampaignsCampaignIdQuestions(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "campaignId" -------------
	var campaignId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "campaignId", c.Params("campaignId"), &campaignId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter campaignId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostCampaignsCampaignIdQuestions(c, campaignId)
}

// DeleteCampaign operation middleware
func (siw *ServerInterfaceWrapper) DeleteCampaign(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteCampaign(c, id)
}

// GetCampaignById operation middleware
func (siw *ServerInterfaceWrapper) GetCampaignById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetCampaignById(c, id)
}

// UpdateCampaign operation middleware
func (siw *ServerInterfaceWrapper) UpdateCampaign(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateCampaign(c, id)
}

// GetCouponsByCampaign operation middleware
func (siw *ServerInterfaceWrapper) GetCouponsByCampaign(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetCouponsByCampaign(c, id)
}

// GenerateTokens operation middleware
func (siw *ServerInterfaceWrapper) GenerateTokens(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GenerateTokens(c, id)
}

// GetAllCustomers operation middleware
func (siw *ServerInterfaceWrapper) GetAllCustomers(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllCustomersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetAllCustomers(c, params)
}

// CreateCustomer operation middleware
func (siw *ServerInterfaceWrapper) CreateCustomer(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateCustomer(c)
}

// GetCustomersByOrganization operation middleware
func (siw *ServerInterfaceWrapper) GetCustomersByOrganization(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomersByOrganizationParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "organizationId" -------------

	if paramValue := c.Query("organizationId"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument organizationId is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "organizationId", query, &params.OrganizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organizationId: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetCustomersByOrganization(c, params)
}

// DeleteCustomer operation middleware
func (siw *ServerInterfaceWrapper) DeleteCustomer(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteCustomer(c, id)
}

// GetCustomerById operation middleware
func (siw *ServerInterfaceWrapper) GetCustomerById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetCustomerById(c, id)
}

// UpdateCustomer operation middleware
func (siw *ServerInterfaceWrapper) UpdateCustomer(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateCustomer(c, id)
}

// PostFlutterwaveWebhook operation middleware
func (siw *ServerInterfaceWrapper) PostFlutterwaveWebhook(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostFlutterwaveWebhook(c)
}

// GetOrganizations operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizations(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrganizationsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetOrganizations(c, params)
}

// CreateOrganization operation middleware
func (siw *ServerInterfaceWrapper) CreateOrganization(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateOrganization(c)
}

// GetOrganizationByName operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizationByName(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrganizationByNameParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "name" -------------

	if paramValue := c.Query("name"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument name is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetOrganizationByName(c, params)
}

// DeleteOrganization operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrganization(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "organization_id" -------------
	var organizationId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "organization_id", c.Params("organization_id"), &organizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organization_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteOrganization(c, organizationId)
}

// GetOrganizationById operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizationById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "organization_id" -------------
	var organizationId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "organization_id", c.Params("organization_id"), &organizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organization_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetOrganizationById(c, organizationId)
}

// UpdateOrganization operation middleware
func (siw *ServerInterfaceWrapper) UpdateOrganization(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "organization_id" -------------
	var organizationId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "organization_id", c.Params("organization_id"), &organizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organization_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateOrganization(c, organizationId)
}

// GetUsersByOrganization operation middleware
func (siw *ServerInterfaceWrapper) GetUsersByOrganization(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "organization_id" -------------
	var organizationId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "organization_id", c.Params("organization_id"), &organizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organization_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersByOrganizationParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetUsersByOrganization(c, organizationId, params)
}

// GetAllPayments operation middleware
func (siw *ServerInterfaceWrapper) GetAllPayments(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllPaymentsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetAllPayments(c, params)
}

// CreatePayment operation middleware
func (siw *ServerInterfaceWrapper) CreatePayment(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreatePayment(c)
}

// GetPaymentsByOrganization operation middleware
func (siw *ServerInterfaceWrapper) GetPaymentsByOrganization(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "organization_id" -------------
	var organizationId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "organization_id", c.Params("organization_id"), &organizationId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter organization_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPaymentsByOrganizationParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetPaymentsByOrganization(c, organizationId, params)
}

// GetPaymentById operation middleware
func (siw *ServerInterfaceWrapper) GetPaymentById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetPaymentById(c, id)
}

// UpdatePaymentById operation middleware
func (siw *ServerInterfaceWrapper) UpdatePaymentById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdatePaymentById(c, id)
}

// DeleteQuestionsQuestionId operation middleware
func (siw *ServerInterfaceWrapper) DeleteQuestionsQuestionId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "questionId" -------------
	var questionId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "questionId", c.Params("questionId"), &questionId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter questionId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteQuestionsQuestionId(c, questionId)
}

// GetQuestionsQuestionIdResponses operation middleware
func (siw *ServerInterfaceWrapper) GetQuestionsQuestionIdResponses(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "questionId" -------------
	var questionId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "questionId", c.Params("questionId"), &questionId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter questionId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQuestionsQuestionIdResponsesParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetQuestionsQuestionIdResponses(c, questionId, params)
}

// PostQuestionsQuestionIdResponses operation middleware
func (siw *ServerInterfaceWrapper) PostQuestionsQuestionIdResponses(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "questionId" -------------
	var questionId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "questionId", c.Params("questionId"), &questionId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter questionId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostQuestionsQuestionIdResponses(c, questionId)
}

// ListTransactions operation middleware
func (siw *ServerInterfaceWrapper) ListTransactions(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTransactionsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.ListTransactions(c, params)
}

// CreateTransaction operation middleware
func (siw *ServerInterfaceWrapper) CreateTransaction(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateTransaction(c)
}

// GetTransaction operation middleware
func (siw *ServerInterfaceWrapper) GetTransaction(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "transactionId" -------------
	var transactionId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "transactionId", c.Params("transactionId"), &transactionId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter transactionId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetTransaction(c, transactionId)
}

// UpdateTransactionStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateTransactionStatus(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "transactionId" -------------
	var transactionId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "transactionId", c.Params("transactionId"), &transactionId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter transactionId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateTransactionStatus(c, transactionId)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetUsers(c, params)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.CreateUser(c)
}

// GetUserByEmail operation middleware
func (siw *ServerInterfaceWrapper) GetUserByEmail(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserByEmailParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "email" -------------

	if paramValue := c.Query("email"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument email is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "email", query, &params.Email)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter email: %w", err).Error())
	}

	return siw.Handler.GetUserByEmail(c, params)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteUser(c, userId)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetUserById(c, userId)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateUser(c, userId)
}

// UpdateUserPassword operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserPassword(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Params("user_id"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.UpdateUserPassword(c, userId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/auth/login", wrapper.LoginUser)

	router.Post(options.BaseURL+"/auth/logout", wrapper.LogoutUser)

	router.Post(options.BaseURL+"/auth/superuser/login", wrapper.SuperuserLogin)

	router.Get(options.BaseURL+"/balances", wrapper.GetAllBalances)

	router.Post(options.BaseURL+"/balances", wrapper.CreateBalance)

	router.Get(options.BaseURL+"/balances/:campaignId", wrapper.GetBalanceByCampaign)

	router.Patch(options.BaseURL+"/balances/:campaignId", wrapper.UpdateBalance)

	router.Get(options.BaseURL+"/campaigns", wrapper.GetAllCampaigns)

	router.Post(options.BaseURL+"/campaigns", wrapper.CreateCampaign)

	router.Get(options.BaseURL+"/campaigns/organization", wrapper.GetCampaignsByOrganization)

	router.Get(options.BaseURL+"/campaigns/:campaignId/questions", wrapper.GetCampaignsCampaignIdQuestions)

	router.Post(options.BaseURL+"/campaigns/:campaignId/questions", wrapper.PostCampaignsCampaignIdQuestions)

	router.Delete(options.BaseURL+"/campaigns/:id", wrapper.DeleteCampaign)

	router.Get(options.BaseURL+"/campaigns/:id", wrapper.GetCampaignById)

	router.Put(options.BaseURL+"/campaigns/:id", wrapper.UpdateCampaign)

	router.Get(options.BaseURL+"/campaigns/:id/coupons", wrapper.GetCouponsByCampaign)

	router.Post(options.BaseURL+"/campaigns/:id/generate-tokens", wrapper.GenerateTokens)

	router.Get(options.BaseURL+"/customers", wrapper.GetAllCustomers)

	router.Post(options.BaseURL+"/customers", wrapper.CreateCustomer)

	router.Get(options.BaseURL+"/customers/organization", wrapper.GetCustomersByOrganization)

	router.Delete(options.BaseURL+"/customers/:id", wrapper.DeleteCustomer)

	router.Get(options.BaseURL+"/customers/:id", wrapper.GetCustomerById)

	router.Put(options.BaseURL+"/customers/:id", wrapper.UpdateCustomer)

	router.Post(options.BaseURL+"/flutterwave/webhook", wrapper.PostFlutterwaveWebhook)

	router.Get(options.BaseURL+"/organizations", wrapper.GetOrganizations)

	router.Post(options.BaseURL+"/organizations", wrapper.CreateOrganization)

	router.Get(options.BaseURL+"/organizations/search", wrapper.GetOrganizationByName)

	router.Delete(options.BaseURL+"/organizations/:organization_id", wrapper.DeleteOrganization)

	router.Get(options.BaseURL+"/organizations/:organization_id", wrapper.GetOrganizationById)

	router.Put(options.BaseURL+"/organizations/:organization_id", wrapper.UpdateOrganization)

	router.Get(options.BaseURL+"/organizations/:organization_id/users", wrapper.GetUsersByOrganization)

	router.Get(options.BaseURL+"/payments", wrapper.GetAllPayments)

	router.Post(options.BaseURL+"/payments", wrapper.CreatePayment)

	router.Get(options.BaseURL+"/payments/organization/:organization_id", wrapper.GetPaymentsByOrganization)

	router.Get(options.BaseURL+"/payments/:id", wrapper.GetPaymentById)

	router.Put(options.BaseURL+"/payments/:id", wrapper.UpdatePaymentById)

	router.Delete(options.BaseURL+"/questions/:questionId", wrapper.DeleteQuestionsQuestionId)

	router.Get(options.BaseURL+"/questions/:questionId/responses", wrapper.GetQuestionsQuestionIdResponses)

	router.Post(options.BaseURL+"/questions/:questionId/responses", wrapper.PostQuestionsQuestionIdResponses)

	router.Get(options.BaseURL+"/transactions", wrapper.ListTransactions)

	router.Post(options.BaseURL+"/transactions", wrapper.CreateTransaction)

	router.Get(options.BaseURL+"/transactions/:transactionId", wrapper.GetTransaction)

	router.Patch(options.BaseURL+"/transactions/:transactionId", wrapper.UpdateTransactionStatus)

	router.Get(options.BaseURL+"/users", wrapper.GetUsers)

	router.Post(options.BaseURL+"/users", wrapper.CreateUser)

	router.Get(options.BaseURL+"/users/email", wrapper.GetUserByEmail)

	router.Delete(options.BaseURL+"/users/:user_id", wrapper.DeleteUser)

	router.Get(options.BaseURL+"/users/:user_id", wrapper.GetUserById)

	router.Put(options.BaseURL+"/users/:user_id", wrapper.UpdateUser)

	router.Put(options.BaseURL+"/users/:user_id/password", wrapper.UpdateUserPassword)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
